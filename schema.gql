# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  helloWorld: String!

  """get event with feedback"""
  getEventWithFeedback(pageSize: Int = 10, page: Int = 0, eventId: String!): [EventFeedback!]!

  """Admin gets all events"""
  getAllEvents(pageSize: Int = 10, page: Int = 0): [Event!]!

  """Get Admin's events"""
  getAdminAllEvents(pageSize: Int = 10, page: Int = 0): [Event!]!

  """Users get upcoming events"""
  getUpcomingEvents(pageSize: Int = 10, page: Int = 0): [Event!]!

  """Get a single event"""
  getSingleEvent(eventId: String!): Event!

  """Search events by name"""
  searchEventsByName(pageSize: Int = 10, page: Int = 0, name: String!): [Event!]!

  """Filter events by Location"""
  filterEventsByLocation(pageSize: Int = 10, page: Int = 0, location: String!): [Event!]!
}

type EventFeedback {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  event: Event
  name: String!
  email: String!
  satisfaction: Float!
  inclusion: Float!
  likelihoodToAttend: Float!
  keyTakeAway: String
  comment: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Event {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  dateOfEvent: DateTime!
  eventStartTime: DateTime!
  eventEndTime: DateTime!
  dateOfReminder: DateTime!
  location: String!
  imageUrl: String
  user: User
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  phoneNumber: String!
  location: String!
  role: RoleEnum!
}

enum RoleEnum {
  USER
  ADMIN
}

type Mutation {
  """Create user"""
  registerUser(input: CreateUserInput!): User!

  """User login"""
  loginUser(input: LoginInput!): LoginResponse!

  """Attendee registration"""
  registerToAttendEvent(file: Upload, input: AttendeeInput!, eventId: String!): Attendee!

  """Attendee gives feedback"""
  eventFeedback(input: EventFeedbackInput!, eventId: String!): EventFeedback!

  """ADMIN creates Event"""
  createEvent(input: CreateEventInput!, file: Upload): Event!

  """Admin updates an event"""
  updateEvent(input: UpdateEventInput!, file: Upload, eventId: String!): Event!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phoneNumber: String!
  location: String!
}

type LoginResponse {
  user: User!
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Attendee {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  dob: DateTime!
  gender: Gender!
  organizationSchool: String!
  avatar: String!
  event: Event
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AttendeeInput {
  firstName: String!
  lastName: String!
  email: String!
  dob: DateTime!
  gender: Gender!
  organizationSchool: String!
  avatar: String
  eventId: String
}

input EventFeedbackInput {
  name: String!
  email: String!
  satisfaction: Float!
  inclusion: Float!
  likelihoodToAttend: Float!
  keyTakeAway: String!
  comment: String!
  eventId: String
}

input CreateEventInput {
  name: String!
  description: String!
  dateOfEvent: DateTime!
  eventStartTime: DateTime!
  eventEndTime: DateTime!
  dateOfReminder: DateTime!
  location: String!
  imageUrl: String
  userId: String
}

input UpdateEventInput {
  name: String
  description: String
  dateOfEvent: DateTime
  eventStartTime: DateTime
  eventEndTime: DateTime
  dateOfReminder: DateTime
  location: String
  imageUrl: String
}
